"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectWithoutBindings = void 0;
const visitor_1 = require("../visitor");
const types_1 = require("./types");
const fromParameter_1 = require("./fromParameter");
const collectWithoutBindings = (node) => (0, visitor_1.dispatch)({ node, visitor: new DeclarationsCollector() });
exports.collectWithoutBindings = collectWithoutBindings;
class DeclarationsCollector {
    visitAbi({ node: abi, context }) {
        return abi
            .map(node => (0, visitor_1.dispatch)({ node, context, visitor: this }))
            .reduce(types_1.merge, (0, types_1.empty)());
    }
    visitEventEntry({ node: entry, context }) {
        return entry.inputs
            .map(node => (0, visitor_1.dispatch)({ node, context, visitor: this }))
            .reduce(types_1.merge, (0, types_1.empty)());
    }
    visitErrorEntry({ node: entry, context }) {
        return entry.inputs
            .map(node => (0, visitor_1.dispatch)({ node, context, visitor: this }))
            .reduce(types_1.merge, (0, types_1.empty)());
    }
    visitFunctionEntry({ node: entry, context }) {
        return [...entry.inputs, ...(entry.outputs || [])]
            .map(node => (0, visitor_1.dispatch)({ node, context, visitor: this }))
            .reduce(types_1.merge, (0, types_1.empty)());
    }
    visitConstructorEntry({ node: entry, context }) {
        return entry.inputs
            .map(node => (0, visitor_1.dispatch)({ node, context, visitor: this }))
            .reduce(types_1.merge, (0, types_1.empty)());
    }
    visitFallbackEntry({ node: entry }) {
        return (0, types_1.empty)();
    }
    visitReceiveEntry({ node: entry, }) {
        return (0, types_1.empty)();
    }
    visitParameter({ node: parameter }) {
        const { declarations } = (0, fromParameter_1.fromParameter)(parameter);
        return declarations;
    }
}
//# sourceMappingURL=collect.js.map