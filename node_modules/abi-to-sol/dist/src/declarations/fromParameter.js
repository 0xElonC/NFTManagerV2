"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromParameter = void 0;
const parameter_1 = require("../parameter");
const identifier_1 = require("./identifier");
const types_1 = require("./types");
const fromParameter = (parameter) => {
    if (!(0, parameter_1.isParameter)(parameter)) {
        throw new Error(`Parameter type \`${parameter.type}\` is not a valid ABI type`);
    }
    if (parameter_1.Parameter.isElementary(parameter)) {
        return fromElementaryParameter(parameter);
    }
    if (parameter_1.Parameter.isArray(parameter)) {
        return fromArrayParameter(parameter);
    }
    if (parameter_1.Parameter.isTuple(parameter)) {
        return fromTupleParameter(parameter);
    }
    throw new Error(`Unexpectedly could not convert Abi.Parameter to Kind`);
};
exports.fromParameter = fromParameter;
const fromElementaryParameter = (parameter) => {
    if (parameter_1.Parameter.isUserDefinedValueType(parameter)) {
        const { name, scope } = parameter_1.Parameter.UserDefinedValueType.recognize(parameter);
        const identifier = identifier_1.Identifier.UserDefinedValueType.create({ name, scope });
        const { type, internalType } = parameter;
        const parameterKind = {
            type,
            hints: { internalType },
            identifier
        };
        return {
            parameterKind,
            declarations: (0, types_1.from)(parameterKind)
        };
    }
    const { type, internalType } = parameter;
    const parameterKind = Object.assign({ type }, (internalType
        ? { hints: { internalType } }
        : {}));
    return {
        parameterKind,
        declarations: (0, types_1.from)(parameterKind)
    };
};
const fromArrayParameter = (parameter) => {
    const itemParameter = parameter_1.Parameter.Array.item(parameter);
    const { parameterKind: itemKind, declarations } = (0, exports.fromParameter)(itemParameter);
    const parameterKind = Object.assign({ itemKind }, (parameter_1.Parameter.Array.isStatic(parameter)
        ? { length: parameter_1.Parameter.Array.Static.length(parameter) }
        : {}));
    return {
        declarations,
        parameterKind
    };
};
const fromTupleParameter = (parameter) => {
    const { internalType, components } = parameter;
    const { signature, name, scope } = parameter_1.Parameter.Tuple.recognize(parameter);
    const identifier = name
        ? identifier_1.Identifier.Struct.create({ name, scope })
        : undefined;
    const memberResults = components.map(component => {
        const { name } = component;
        const { parameterKind: kind, declarations } = (0, exports.fromParameter)(component);
        return {
            member: Object.assign({ kind }, (name
                ? { name }
                : {})),
            declarations
        };
    });
    const members = memberResults.map(({ member }) => member);
    const membersDeclarations = memberResults
        .map(({ declarations }) => declarations)
        .reduce(types_1.merge, (0, types_1.empty)());
    const parameterKind = Object.assign(Object.assign({ signature,
        members }, (internalType
        ? { hints: { internalType } }
        : {})), (identifier
        ? { identifier }
        : {}));
    const declarations = (0, types_1.merge)(membersDeclarations, (0, types_1.from)(parameterKind));
    return {
        declarations,
        parameterKind
    };
};
//# sourceMappingURL=fromParameter.js.map