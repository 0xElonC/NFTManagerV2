import type { Abi as SchemaAbi } from "@truffle/contract-schema/spec";
import type * as Abi from "@truffle/abi-utils";
import { Visitor, VisitOptions, Node } from "../visitor";
export declare const observableProperties: readonly ["defines-receive", "defines-fallback", "needs-abiencoder-v2", "defines-error"];
export type AbiProperty = typeof observableProperties[number];
export type AbiProperties = Partial<{
    [F in AbiProperty]: true;
}>;
export declare const analyze: (node: SchemaAbi | Node) => Partial<{
    "defines-receive": true;
    "defines-fallback": true;
    "needs-abiencoder-v2": true;
    "defines-error": true;
}>;
export declare class AbiPropertiesCollector implements Visitor<AbiProperties> {
    visitAbi({ node: nodes }: VisitOptions<Abi.Abi>): AbiProperties;
    visitEventEntry({ node: entry }: VisitOptions<Abi.EventEntry>): AbiProperties;
    visitErrorEntry({ node: entry }: VisitOptions<Abi.ErrorEntry>): AbiProperties;
    visitFunctionEntry({ node: entry, }: VisitOptions<Abi.FunctionEntry>): AbiProperties;
    visitConstructorEntry({ node: entry, }: VisitOptions<Abi.ConstructorEntry>): AbiProperties;
    visitFallbackEntry({ node, }: VisitOptions<Abi.FallbackEntry>): AbiProperties;
    visitReceiveEntry({ node, }: VisitOptions<Abi.ReceiveEntry>): AbiProperties;
    visitParameter({ node: parameter, }: VisitOptions<Abi.Parameter>): AbiProperties;
}
//# sourceMappingURL=analyze.d.ts.map