"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRawSolidity = void 0;
const package_json_1 = require("../../package.json");
const declarations_1 = require("../declarations");
const visitor_1 = require("../visitor");
const print_1 = require("./print");
const options_1 = require("./options");
const shimGlobalInterfaceName = "__Structs";
const generateRawSolidity = (abi, options) => (0, visitor_1.dispatch)({ node: abi, visitor: new SolidityGenerator(options) });
exports.generateRawSolidity = generateRawSolidity;
class SolidityGenerator {
    constructor({ name, license, mode, outputAttribution, outputSource, solidityVersion, versionsFeatures, abiProperties, declarations }) {
        this.name = name;
        this.license = license;
        this.mode = mode;
        this.solidityVersion = solidityVersion;
        this.versionsFeatures = versionsFeatures;
        this.abiProperties = abiProperties;
        this.declarations = declarations;
        this.outputAttribution = outputAttribution;
        this.outputSource = outputSource;
    }
    visitAbi({ node: abi }) {
        switch (this.mode) {
            case options_1.GenerateSolidityMode.Normal: {
                return [
                    this.generateHeader(),
                    this.generateInterface(abi),
                    this.generateExternals(),
                    this.generateSourceNotice(abi),
                ].join("\n\n");
            }
            case options_1.GenerateSolidityMode.Embedded: {
                return [
                    this.generateInterface(abi),
                    this.generateExternals(),
                ].join("\n\n");
            }
        }
    }
    visitFunctionEntry({ node: entry, context }) {
        const { name, inputs, stateMutability } = entry;
        return [
            `function ${name}(`,
            entry.inputs.map((node) => (0, visitor_1.dispatch)({
                node,
                visitor: this,
                context: Object.assign(Object.assign({}, context), { parameterModifiers: (parameter) => parameter.type.startsWith("tuple") ||
                        parameter.type.includes("[") ||
                        parameter.type === "bytes" ||
                        parameter.type === "string"
                        ? [this.generateArrayParameterLocation(parameter)]
                        : [] }),
            })),
            `) external`,
            this.generateStateMutability(entry),
            entry.outputs && entry.outputs.length > 0
                ? [
                    `returns (`,
                    entry.outputs
                        .map((node) => (0, visitor_1.dispatch)({
                        node,
                        visitor: this,
                        context: {
                            parameterModifiers: (parameter) => parameter.type.startsWith("tuple") ||
                                parameter.type.includes("[") ||
                                parameter.type === "bytes" ||
                                parameter.type === "string"
                                ? ["memory"]
                                : [],
                        },
                    }))
                        .join(", "),
                    `)`,
                ].join("")
                : ``,
            `;`,
        ].join(" ");
    }
    visitConstructorEntry({ node: entry }) {
        // interfaces don't have constructors
        return "";
    }
    visitFallbackEntry({ node: entry }) {
        const servesAsReceive = this.abiProperties["defines-receive"] &&
            !this.versionsFeatures["receive-keyword"].supported();
        const { stateMutability } = entry;
        return `${this.generateFallbackName()} () external ${stateMutability === "payable" || servesAsReceive ? "payable" : ""};`;
    }
    visitReceiveEntry() {
        // if version has receive, emit as normal
        if (this.versionsFeatures["receive-keyword"].supported()) {
            return `receive () external payable;`;
        }
        // if this ABI defines a fallback separately, emit nothing, since
        // visitFallbackEntry will cover it
        if (this.abiProperties["defines-fallback"]) {
            return "";
        }
        // otherwise, explicitly invoke visitFallbackEntry
        return this.visitFallbackEntry({
            node: { type: "fallback", stateMutability: "payable" },
        });
    }
    visitEventEntry({ node: entry, context }) {
        const { name, inputs, anonymous } = entry;
        return [
            `event ${name}(`,
            inputs.map((node) => (0, visitor_1.dispatch)({
                node,
                visitor: this,
                context: Object.assign(Object.assign({}, context), { parameterModifiers: (parameter) => 
                    // TODO fix this
                    parameter.indexed ? ["indexed"] : [] }),
            })),
            `)`,
            `${anonymous ? "anonymous" : ""};`,
        ].join(" ");
    }
    visitErrorEntry({ node: entry, context }) {
        if (!this.versionsFeatures["custom-errors"].supported()) {
            throw new Error("ABI defines custom errors; use Solidity v0.8.4 or higher");
        }
        const { name, inputs } = entry;
        return [
            `error ${name}(`,
            inputs.map((node) => (0, visitor_1.dispatch)({
                node,
                visitor: this,
                context: Object.assign(Object.assign({}, context), { parameterModifiers: (parameter) => [] }),
            })),
            `);`,
        ].join(" ");
    }
    visitParameter({ node: parameter, context }) {
        const kind = declarations_1.Declarations.find(parameter, this.declarations);
        const type = (0, print_1.printType)(kind, {
            currentInterfaceName: context === null || context === void 0 ? void 0 : context.interfaceName,
            enableGlobalStructs: this.versionsFeatures["global-structs"].supported(),
            enableUserDefinedValueTypes: this.versionsFeatures["user-defined-value-types"].supported(),
            shimGlobalInterfaceName
        });
        // @ts-ignore
        const { parameterModifiers } = context;
        return [type, ...parameterModifiers(parameter), parameter.name].join(" ");
    }
    generateHeader() {
        const includeExperimentalPragma = this.abiProperties["needs-abiencoder-v2"] &&
            !this.versionsFeatures["abiencoder-v2"].consistently("default");
        const attribution = !this.outputAttribution
            ? []
            : [this.generateAttribution()];
        return [
            `// SPDX-License-Identifier: ${this.license}`,
            ...attribution,
            `pragma solidity ${this.solidityVersion};`,
            ...(includeExperimentalPragma
                ? [`pragma experimental ABIEncoderV2;`]
                : [])
        ].join("\n");
    }
    generateAttribution() {
        const unit = this.mode === options_1.GenerateSolidityMode.Normal
            ? "FILE"
            : "INTERFACE";
        return this.outputSource
            ? `// !! THIS ${unit} WAS AUTOGENERATED BY abi-to-sol v${package_json_1.version}. SEE SOURCE BELOW. !!`
            : `// !! THIS ${unit} WAS AUTOGENERATED BY abi-to-sol v${package_json_1.version}. !!`;
    }
    generateSourceNotice(abi) {
        if (!this.outputSource) {
            return "";
        }
        return [
            ``,
            `// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:`,
            `/*`,
            JSON.stringify(abi),
            `*/`,
        ].join("\n");
    }
    generateExternals() {
        if (!this.versionsFeatures["structs-in-interfaces"].supported() &&
            Object.values(this.declarations.byIdentifierReference).some(({ identifier }) => identifier.class === "struct")) {
            throw new Error("abi-to-sol does not support custom struct types for this Solidity version");
        }
        const isDeclarable = this.versionsFeatures["user-defined-value-types"].supported()
            ? (kind) => declarations_1.Kind.isStruct(kind) || declarations_1.Kind.isUserDefinedValueType(kind)
            : declarations_1.Kind.isStruct;
        const hasDifferentContainer = (kind) => !!kind.identifier.container &&
            kind.identifier.container.name !== this.name;
        const externalDeclarations = Object.entries(this.declarations.identifiersByContainer).flatMap((pair) => {
            const [containerIdentifierReference, identifierReferences] = pair;
            const kinds = new Set([...identifierReferences]
                .map((identifierReference) => this.declarations.byIdentifierReference[identifierReference]).filter((kind) => {
                return isDeclarable(kind) && hasDifferentContainer(kind);
            }));
            if (!kinds.size) {
                return [];
            }
            const { identifier: { container } } = [...kinds][0];
            return [{
                    container,
                    kinds
                }];
        }).map(({ container, kinds }) => [
            `interface ${container.name} {`,
            this.generateSiblingDeclarations(kinds, {
                interfaceName: container.name
            }),
            `}`
        ].join("\n")).join("\n\n");
        const globalKinds = new Set([
            ...this.declarations.globalIdentifiers
        ].flatMap(reference => {
            const kind = this.declarations.byIdentifierReference[reference];
            if (isDeclarable(kind)) {
                return [kind];
            }
            return [];
        }));
        if (globalKinds.size > 0) {
            const globalDeclarations = this.generateSiblingDeclarations(globalKinds);
            return [
                externalDeclarations,
                this.versionsFeatures["global-structs"].supported()
                    ? globalDeclarations
                    : [
                        `interface ${shimGlobalInterfaceName} {`,
                        globalDeclarations,
                        `}`
                    ].join("\n")
            ].join("\n\n");
        }
        return externalDeclarations;
    }
    generateSiblingDeclarations(kinds, context = {}) {
        return [...kinds]
            .map(kind => {
            if (declarations_1.Kind.isStruct(kind)) {
                return this.generateStructDeclaration(kind, context);
            }
            if (this.versionsFeatures["user-defined-value-types"].supported() &&
                declarations_1.Kind.isUserDefinedValueType(kind)) {
                return this.generateUserDefinedValueTypeDefinition(kind, context);
            }
        })
            .join("\n\n");
    }
    generateStructDeclaration(kind, context = {}) {
        return [
            `struct ${kind.identifier.name} {`,
            ...kind.members.map(({ name, kind: memberKind }) => `${(0, print_1.printType)(memberKind, {
                currentInterfaceName: context.interfaceName,
                enableGlobalStructs: this.versionsFeatures["global-structs"].supported(),
                enableUserDefinedValueTypes: this.versionsFeatures["user-defined-value-types"].supported(),
                shimGlobalInterfaceName
            })} ${name};`),
            `}`
        ].join("\n");
    }
    generateUserDefinedValueTypeDefinition(kind, context = {}) {
        return [
            `type ${kind.identifier.name} is ${kind.type};`
        ].join("\n");
    }
    generateStateMutability(entry) {
        if (entry.stateMutability && entry.stateMutability !== "nonpayable") {
            return entry.stateMutability;
        }
        return "";
    }
    generateFallbackName() {
        if (this.versionsFeatures["fallback-keyword"].supported()) {
            return "fallback";
        }
        if (this.versionsFeatures["fallback-keyword"].missing()) {
            return "function";
        }
        throw new Error(`Desired Solidity range lacks unambigious fallback syntax.`);
    }
    generateArrayParameterLocation(parameter) {
        const location = this.versionsFeatures["array-parameter-location"];
        if (location.consistently(undefined)) {
            return "";
        }
        if (location.consistently("memory")) {
            return "memory";
        }
        if (location.consistently("calldata")) {
            return "calldata";
        }
        throw new Error(`Desired Solidity range lacks unambiguous location specifier for ` +
            `parameter of type "${parameter.type}".`);
    }
    generateInterface(abi) {
        const kinds = new Set([
            ...(this.declarations.identifiersByContainer[declarations_1.Identifier.toReference({ class: "interface", name: this.name })] || [])
        ].map(reference => this.declarations.byIdentifierReference[reference]));
        return [
            `interface ${this.name} {`,
            ...(this.mode === options_1.GenerateSolidityMode.Embedded && this.outputAttribution
                ? [this.generateAttribution()]
                : []),
            this.generateSiblingDeclarations(kinds, { interfaceName: this.name }),
            ``,
            ...abi.map((node) => (0, visitor_1.dispatch)({
                node,
                context: { interfaceName: this.name },
                visitor: this
            })),
            ...(this.mode === options_1.GenerateSolidityMode.Embedded
                ? [this.generateSourceNotice(abi)]
                : []),
            `}`,
        ].join("\n");
    }
}
//# sourceMappingURL=generate.js.map