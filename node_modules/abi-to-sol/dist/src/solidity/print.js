"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printType = void 0;
const declarations_1 = require("../declarations");
const printType = (kind, options = {}) => {
    const { currentInterfaceName, enableUserDefinedValueTypes = false, enableGlobalStructs = false, shimGlobalInterfaceName } = options;
    if (declarations_1.Kind.isUserDefinedValueType(kind)) {
        return printUserDefinedValueTypeType(kind, {
            currentInterfaceName,
            enableUserDefinedValueTypes
        });
    }
    if (declarations_1.Kind.isElementary(kind)) {
        return printElementaryType(kind);
    }
    if (declarations_1.Kind.isStruct(kind)) {
        return printStructType(kind, {
            currentInterfaceName,
            enableGlobalStructs,
            shimGlobalInterfaceName
        });
    }
    if (declarations_1.Kind.isArray(kind)) {
        return printArrayType(kind, options);
    }
    throw new Error(`Unexpectedly unsupported kind: ${JSON.stringify(kind)}`);
};
exports.printType = printType;
const printUserDefinedValueTypeType = (kind, options = {}) => {
    const { currentInterfaceName, enableUserDefinedValueTypes = false } = options;
    const result = (kind.identifier.container &&
        kind.identifier.container.name !== currentInterfaceName)
        ? `${kind.identifier.container.name}.${kind.identifier.name}`
        : kind.identifier.name;
    if (!enableUserDefinedValueTypes) {
        return [
            `/* warning: missing UDVT support in source Solidity version; `,
            `parameter is \`${result}\`. */ `,
            kind.type
        ].join("");
    }
    return result;
};
const printElementaryType = (kind, options = {}) => {
    var _a;
    if (kind.type !== "function") {
        return kind.type;
    }
    // use just the `internalType` field if it exists
    if ((_a = kind.hints) === null || _a === void 0 ? void 0 : _a.internalType) {
        return kind.hints.internalType;
    }
    // otherwise output minimally syntactically-valid syntax with a warning
    return [
        "/* warning: the following type may be incomplete. ",
        "the receiving contract may expect additional input or output parameters. */ ",
        "function() external"
    ].join("");
};
const printStructType = (kind, options = {}) => {
    const { currentInterfaceName, enableGlobalStructs = false, shimGlobalInterfaceName } = options;
    if (!enableGlobalStructs && !shimGlobalInterfaceName) {
        throw new Error("Option `shimGlobalInterfaceName` is required without global structs");
    }
    if (kind.identifier.container &&
        kind.identifier.container.name !== currentInterfaceName) {
        return `${kind.identifier.container.name}.${kind.identifier.name}`;
    }
    if (!kind.identifier.container &&
        currentInterfaceName &&
        !enableGlobalStructs) {
        return `${shimGlobalInterfaceName}.${kind.identifier.name}`;
    }
    return kind.identifier.name;
};
const printArrayType = (kind, options = {}) => {
    if (declarations_1.Kind.Array.isDynamic(kind)) {
        return `${(0, exports.printType)(kind.itemKind, options)}[]`;
    }
    // static case
    return `${(0, exports.printType)(kind.itemKind, options)}[${kind.length}]`;
};
//# sourceMappingURL=print.js.map